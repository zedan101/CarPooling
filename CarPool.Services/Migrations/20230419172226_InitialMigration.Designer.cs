// <auto-generated />
using System;
using Carpool.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarPool.Services.Migrations
{
    [DbContext(typeof(CarPoolContext))]
    [Migration("20230419172226_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarPool.Services.Data.Models.BookedRide", b =>
                {
                    b.Property<int>("SlNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlNo"));

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndLocationId")
                        .HasColumnType("int");

                    b.Property<string>("RideId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StartLocationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SlNo");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("RideId");

                    b.HasIndex("StartLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("BookedRide");

                    b.HasData(
                        new
                        {
                            SlNo = 1,
                            BookedOn = new DateTime(2023, 4, 19, 22, 52, 26, 409, DateTimeKind.Local).AddTicks(4408),
                            EndLocationId = 3,
                            RideId = "abc@123",
                            StartLocationId = 2,
                            UserId = "gh2"
                        },
                        new
                        {
                            SlNo = 2,
                            BookedOn = new DateTime(2023, 4, 19, 22, 52, 26, 409, DateTimeKind.Local).AddTicks(4411),
                            EndLocationId = 3,
                            RideId = "abc@123",
                            StartLocationId = 2,
                            UserId = "gh2"
                        });
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.Locations", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "delhi"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "nagpur"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "mumbai"
                        });
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.OfferedRide", b =>
                {
                    b.Property<string>("RideId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("OfferedRide");

                    b.HasData(
                        new
                        {
                            RideId = "abc@123",
                            AvailableSeats = 2,
                            CreatedOn = new DateTime(2023, 4, 19, 22, 52, 26, 409, DateTimeKind.Local).AddTicks(4367),
                            Date = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.0,
                            Time = 1,
                            UserId = "gh1"
                        });
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.RideLocation", b =>
                {
                    b.Property<int>("SerialNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialNo"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("RideId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.HasKey("SerialNo");

                    b.HasIndex("LocationId");

                    b.HasIndex("RideId");

                    b.ToTable("RideLocation");

                    b.HasData(
                        new
                        {
                            SerialNo = 1,
                            LocationId = 1,
                            RideId = "abc@123",
                            SequenceNum = 0
                        },
                        new
                        {
                            SerialNo = 2,
                            LocationId = 2,
                            RideId = "abc@123",
                            SequenceNum = 1
                        },
                        new
                        {
                            SerialNo = 3,
                            LocationId = 3,
                            RideId = "abc@123",
                            SequenceNum = 2
                        });
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.UserEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = "gh1",
                            Name = "Nitish",
                            Password = "Nitish%%",
                            ProfileImage = "hkdhk",
                            UserEmail = "nitish132@gmail.com"
                        },
                        new
                        {
                            UserId = "gh2",
                            Name = "Deepak",
                            Password = "Deepak%%",
                            ProfileImage = "hkdhk",
                            UserEmail = "deepak@gamail.com"
                        });
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.BookedRide", b =>
                {
                    b.HasOne("CarPool.Services.Data.Models.Locations", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Services.Data.Models.OfferedRide", "OfferedRide")
                        .WithMany("BookedRides")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Services.Data.Models.Locations", "StartLocation")
                        .WithMany()
                        .HasForeignKey("StartLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Services.Data.Models.UserEntity", "User")
                        .WithMany("BookedRides")
                        .HasForeignKey("UserId");

                    b.Navigation("EndLocation");

                    b.Navigation("OfferedRide");

                    b.Navigation("StartLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.OfferedRide", b =>
                {
                    b.HasOne("CarPool.Services.Data.Models.UserEntity", "UserEntity")
                        .WithMany("OfferedRides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.RideLocation", b =>
                {
                    b.HasOne("CarPool.Services.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Services.Data.Models.OfferedRide", "OfferRide")
                        .WithMany("Locations")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("OfferRide");
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.OfferedRide", b =>
                {
                    b.Navigation("BookedRides");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("CarPool.Services.Data.Models.UserEntity", b =>
                {
                    b.Navigation("BookedRides");

                    b.Navigation("OfferedRides");
                });
#pragma warning restore 612, 618
        }
    }
}
